# Performs simple dependency upgrades automatically. Creates (or updates) a PR,
# and enables automerging.

name: upgrade-dependencies

on:
  workflow_call:
    inputs:

      ref:
        type: string
        required: false

      # For PHP.
      php_version:
        type: string
        required: false
        default: '8.0'
      php_extensions:
        type: string
        required: false
        # NOTE: This default is here because Symfony 5 allows mixing Symfony 6
        # dependencies, but symfony/amqp-messenger has an ext-amqp dependency
        # in Symfony 6. Not having that extension installed prevents Composer
        # from upgrading this package.
        default: ':amqp'
      composer_dirs:
        type: string
        required: false

      # For Node.js.
      node_version:
        type: string
        required: false
        default: '18'
      yarn_dirs:
        type: string
        required: false

      # For Rust
      rust_version:
        type: string
        required: false
        default: 'stable'
      cargo_dirs:
        type: string
        required: false

      # For Go
      go_version:
        type: string
        required: false
        default: 'stable'
      go_dirs:
        type: string
        required: false

      # For Nix flakes
      flake_dirs:
        type: string
        required: false

    secrets:

      RINUS_GITHUB_TOKEN:
        required: true

      # For PHP.
      COMPOSER_AUTH:
        required: false

jobs:

  upgrade-deps:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          submodules: recursive
          token: ${{ secrets.RINUS_GITHUB_TOKEN }}

      # For PHP.
      - name: Setup PHP
        if: inputs.composer_dirs != ''
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php_version }}
          tools: composer:v2
          extensions: ${{ inputs.php_extensions }}

      - name: Get composer cache directory
        if: inputs.composer_dirs != ''
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        if: inputs.composer_dirs != ''
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Upgrade composer dependencies
        if: inputs.composer_dirs != ''
        run: |
          for dir in $TARGET_DIRS; do
            echo "::group::Composer in $dir"
            (cd $dir && rm composer.lock && composer install --prefer-dist)
            echo "::endgroup::"
          done
        env:
          TARGET_DIRS: ${{ inputs.composer_dirs }}
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

      # For Node.js.
      - name: Setup Node.js
        if: inputs.yarn_dirs != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'

      - name: Enable corepack
        if: inputs.yarn_dirs != ''
        run: corepack enable

      - name: Upgrade yarn dependencies
        if: inputs.yarn_dirs != ''
        run: |
          if [ -n "$AB_YARNRC" ]; then
            echo "$AB_YARNRC" > "$HOME/.yarnrc.yml"
          fi
          for dir in $TARGET_DIRS; do
            echo "::group::Yarn in $dir"
            (cd $dir && rm yarn.lock && yarn)
            echo "::endgroup::"
          done
          rm -f "$HOME/.yarnrc.yml"
        env:
          TARGET_DIRS: ${{ inputs.yarn_dirs }}
          AB_YARNRC: ${{ secrets.AB_YARNRC }}
          YARN_ENABLE_IMMUTABLE_INSTALLS: "false"

      # For Rust.
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        if: inputs.cargo_dirs != ''
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Upgrade cargo dependencies
        if: inputs.cargo_dirs != ''
        run: |
          for dir in $TARGET_DIRS; do
            echo "::group::Cargo in $dir"
            (cd $dir && cargo update)
            echo "::endgroup::"
          done
        env:
          TARGET_DIRS: ${{ inputs.cargo_dirs }}

      # For Go.
      - name: Setup Go
        if: inputs.go_dirs != ''
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}
          cache-dependency-path: '**/go.sum'

      - name: Upgrade Go dependencies
        if: inputs.go_dirs != ''
        run: |
          for dir in $TARGET_DIRS; do
            echo "::group::Go module in $dir"
            (cd $dir && go get -u -t && go mod tidy)
            echo "::endgroup::"
          done
        env:
          TARGET_DIRS: ${{ inputs.go_dirs }}

      # For Nix.
      - name: Setup Nix
        if: inputs.flake_dirs != ''
        uses: cachix/install-nix-action@v23

      - name: Upgrade Nix flake inputs
        if: inputs.flake_dirs != ''
        run: |
          for dir in $TARGET_DIRS; do
            echo "::group::Flake in $dir"
            (cd $dir && nix flake update)
            echo "::endgroup::"
          done
        env:
          TARGET_DIRS: ${{ inputs.flake_dirs }}

      # Create the PR using the separate token.
      - name: Create PR
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.RINUS_GITHUB_TOKEN }}
          author: 'Rinus <info@angrybytes.com>'
          committer: 'Rinus <info@angrybytes.com>'
          commit-message: "Update dependencies"
          title: "Update dependencies"
          branch: "auto/update-deps"

      - name: Enable automerge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        run: gh pr merge --merge --auto '${{ steps.cpr.outputs.pull-request-number }}'
        env:
          GH_TOKEN: ${{ secrets.RINUS_GITHUB_TOKEN }}
        continue-on-error: true
